name: CI
on: [push, pull_request]

env:
  CARGO_INCREMENTAL: 0
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: android-arm64
            os: ubuntu-latest
            target: aarch64-linux-android
            no_run: --no-run
          - build: android-amd64
            os: ubuntu-latest
            target: x86_64-linux-android
            no_run: --no-run
          - build: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
          - build: macos-arm64
            os: macos-14
            target: aarch64-apple-darwin
          - build: ios-arm64
            os: macos-latest
            target: aarch64-apple-ios
            no_run: --no-run
          - build: windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            no_run: --no-run
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (rustup)
        run: |
          set -euxo pipefail
          rustup toolchain install stable --no-self-update --profile minimal --target ${{ matrix.target }}
          rustup default stable
        shell: bash
      - uses: Swatinem/rust-cache@v2
      - name: Setup android environment
        uses: ./.github/actions/ndk-dev-rs
        with:
          rust-target: ${{ matrix.target }}
        if: contains(matrix.build, 'android')
      - run: cargo test ${{ matrix.no_run }} --workspace --target ${{ matrix.target }}
      - run: cargo test ${{ matrix.no_run }} --workspace --target ${{ matrix.target }} --release

  msrv:
    name: MSRV
    runs-on: ${{ matrix.os }}
    env:
      MSRV: 1.63.0
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install $MSRV --no-self-update --profile minimal
          rustup toolchain install nightly --no-self-update --profile minimal
          rustup default $MSRV
        shell: bash
      - name: Create Cargo.lock with minimal version
        run: cargo +nightly update -Zminimal-versions
      - name: Cache downloaded crates since minimal version is really slow in fetching
        uses: Swatinem/rust-cache@v2
      - run: cargo check --lib -p socket2-ext --locked
      - run: cargo check --lib -p socket2-ext --locked --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install stable --no-self-update --profile minimal --component rustfmt
          rustup default stable
        shell: bash
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install stable --no-self-update --profile minimal --component rustfmt
          rustup default stable
        shell: bash
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt -- --check
